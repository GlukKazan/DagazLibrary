- Для хранения команд использовать линейный массив, а не дерево команд
  - Использовать стековую машину для обработки цепочек команд
    - глубина стека ограничена 
    - вытесненные значения автоматически отбрасываются
  - Продолжение - индекс команды внутри списка
  - Каждая команда возвращает продолжение и может вернуть значение
    - Отбрасывать значение если команда выполняется в не принимающем контексте
  - Цепочка команд компилируется для каждого возможного хода
    - Команды могут переопределяться как произвольные цепочки команд
      - update-counter в checkers.drf
      - переопредение capture в Shogi
      - переопределение is-attacked? в шахматных играх
    - Параметризованные define раскрываются как макросы
  - Цепочка команд строится из
    - pre - действий, с учётом их приоритета
    - действий по умолчанию перед началом хода
      - any position
      - take
      - from
    - move - действий
    - post - действий                          | выполняются для каждого 
    - действий по умолчанию по завершении хода | end move
      - to                                     |
      - drop                                   |
      - end move (если не сформирован явно)    |
  - Все изменения окружений транзакционны, откатываются при выполнении возврата
  - Локальные переменные могут перекрывать ранее объявленные по имени
  - Части нотации, state и подсказки откатываются при выполнении возвратов
- Значения переменных
  - Числовое значение
    - целое число
    - логическое значение
      - <0 - ложь
      - >=0 - истина
    - индекс игрока
    - индекс типа фигуры
  - Строковое значение
    - литералы
  - Команда (например навигации)
  - Список значений (например направлений)
    - зависимые списки (knight-piece в shantranj.drf)
- Окружения
  - BoardEnvironment 
    - текущая позиция
    - навигация
    - группа фигур (для синхронного группового перемещения)
  - StateEnvironment
    - размещение фигур
    - флаги (временные)
    - атрибуты
    - глобальные значения
    - функции требующие обращения к board (is-empty? dir) 
  - Environment
    - локальные переменные (времени выполнения)
    - глобальные переменные (объявленные на фигурах)
  - AnyEnvironment
    - точки возврата команд any
    - точки возврата, сформирванные промежуточными end move
    - продолжения, формируемые условиями и циклами
  - MoveEnvironment
    - нотация хода
    - подсказки модулю визуализации
    - формирование хода
- Команды
  - any
    - формирование точки возврата
    - перебор вариантов
    - может принимать список команд навигации
    - перекрывает имя списка локальной переменной с выбранной командой
  - детерминаторы
    - exists?/not-exists?
    - all
    - count
  - check 
    - возврат к предыдущему any при невыполнении условия
    - формирование нарушаемых инвариантов
  - log 
    - формирование нотации хода
    - откат по SCN при выполнении возврата
    - сборка в строку с учётом order
  - from 
    - начальная позиция (подсказка визуализатору)
  - to 
    - конечная позиция (подсказка визуализатору)
    - промежуточная позиция (при выполнении составных ходов)
  - hint
    - подсказки для AI
  - capture
    - захват фигуры
  - end-move 
    - формируется точка возврата
    - выполняются post-действия
    - завершение формирования текущего хода
  - no-moves?
    - отложенная проверка наличия ходов (в контексте целей)
    - отложенная проверка наличия продолжений хода (в контексте post)
  - is-attacked?/is-defended?
  - board - команды
    - in-zone?
    - команда навигации (возвращает логическое значение)
      - имя позиции
      - имя направления
  - state - команды
    - is-empty?/not-empty?
    - is-enemy?/not-enemy?
    - is-friend?/not-friend?
    - player
    - piece
    - is-flag?/not-flag?    | не наследуемые позиционные флаги
    - set-flag!/clear-flag! | логическое значение
    - set-value!
    - set-player!
    - set-piece!
  - работа с переменными
    - чтение переменной (атрибута, если переменная не найдена)
    - let
      - объявление переменной
      - инициализация значением
    - set!, inc!, dec!
      - изменение значения переменной
      - изменение значения атрибута, если переменная не найдена
      - возможная активация проверки нарушаемого инварианта
      - возврат значения после выполнения действия
  - арифметические и логические команды
  - команды управления
    - if
    - while
    - repeat (в checkers.drf)
