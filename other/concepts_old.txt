- Групповые перемещения
  - Перемещения (имя направления)
    - Может принимать аргумент - имя списка фигур
    - Если набор не пуст, синхронно перемещаются маркеры всех захваченных фигур
    - Если набор пуст, перемещается маркер текущей позиции
    - Команда single подавляет групповое выполнение
  - check
    - Если набор не пуст, проверки выполняются синхронно для маркеров всех фигур в наборе
  - Все прочие проверки выполняются для маркера фигуры, добавленной в набор первой
  - take-piece
    - Может принимать аргумент - имя списка фигур
    - Забирает фигуру в набор перемещаемых фигур
    - Помещает фигуру в конец списка
  - mark-piece
    - Может принимать аргумент - имя списка фигур
    - Добавляет маркер позиции в набор, для последующего сброса фигуры
    - В первый раз выполняется неявно в описании хода сброса фигуры
    - Повторный вызов для ранее добавленной позиции должен игнорироваться
  - drop-pieces 
    - Может принимать аргумент - имя списка фигур
    - Размещает ранее взятые фигуры в порядке захвата
    - По завершении, в качестве текущей, устанавливается позиция последней фигуры помещённой на доску
- Имена всех позиций должны быть уникальными
- Имена направлений из каждой позиции должны быть уникальными
- Топология доски после конфигурирования не меняется
  - Для изменения (например телепортов), создаётся новая доска (в следующей фазе игры) и переносятся фигуры
- Отношение addSynonym не симметрично
  - допускаются связи n:1, но не 1:n (эмулируется переконфигурированием доски)
- addOperation конфигурирует одновременный перенос нескольких фигур
  - Вместе с фигурами переносятся атрибуты полей (например, признак того что на поле можно размещать фигуру для Platform Chess)
  - Выполнение операции можно связать с перемещением фигуры-рукоятки из опроделённой позиции в заданном направлении (возможно в другом grid-е)
- Позиционные флаги - это не клонируемые атрибуты позиций
- Режим "умного" хода (отключаемый)
  - Если для выбранной фигуры найден единственный ход (в том числе в составе группы), он выполняется
  - Если возможных ходов несколько, цели отображаются на доске
  - Если для выбранной цели имеется несколько ходов - открывается меню выбора
  - Если для пустого поля есть единственный ход, заполняющий его (в том числе drop), он выполняется
- Автоматические сохранения состояния
  - Если цикл содержит команду добавления хода, автоматически клонировать состояние в начале каждой итерации
  - В начале процедуры сохранять в стеке current-position, при завершении - восстанавливать
? end-move в post-условии прерывает генерацию частичного хода (даже если очередная часть хода не начинала генерироваться)
  - Превращение в Дамку в English Draughts прерывает рассчёт хода
- Нарушение условия check в любом месте полностью прерывает рассчет хода
  - pre условия вычисляются однократно, нарушение check прерывает процесс
  - При нарушении check в процессе рассчета, в силе остаются уже сформированные end-move
  - post условия проверяются для каждого сформированного хода в отдельности, нарушение условия отменяет ход
  - Допустимы проверки нарушаемых инвариантов (после изменения контрольного значения, проверка повторяется и ход удаляется если она не выполнена)
  - Условия уровня piece (и ниже) вычисляются на уровне частичного хода, pieces на завершении полного хода
- Проверки уровня pices выполняются для всех фигур (с отсечением фигур не могущих выполнить ход), проверки уровня pice - вложенно и для конкретной фигуры
- Проверки уровня pices выполняются для набора всех частичных ходов, входящих в составной
- Для обеспечения возможности drop дополнительная группа проверок выполняется для каждого терминального типа фигуры (даже если фигура такого типа не размещена на доске)
  - Только для ходов, формирующих drop (не может использоваться move)
- move может прерывать рассчёт хода (например если для фигуры в группе отсутствует целевое поле)
- При отсутствии turn-order, порядок хода определяется фразой players
- Попытки изменения несуществующих переменных и атрибутов игнорируются, запросы возвращают f
- Сравнение с неопределнным типом фигуры не приводит к ошибке и всегда ложно
- Правила симметрии и зоны работают исходя из владельца фигуры а не текущего игрока (Ставропольские шашки)
- Для определения одной из максимальных цепочек взятий используется нарушаемый инвариант
  - Нарушаемый вариант включает в себя проверку и последующее присвоение переменной участвующей в проверке
  - Нарушаемый инвариант сохраняется вместе с вариантом хода и перепроверяется при изменении переменной (если условие нарушается, ход удаляется из списка возможных)
- В Environment требуется специальная обработка для позиций и направлений, передаваемых через параметры
  - Все аргументы apply квотируются (если это не вызовы функций)
  - Если при выполнении Get из переменной получено направление или позиция, применяем к Board
- Варианты ходов, с совпадающей нотацией (включая комментарии) считаются одинаковыми
- Игрок может сформировать не один ход а группу (см. Refusal Chess)
  - Группа сформированных альтернатив рассматривается как едный ход
  - Противник должен утвердить лишь один ход из группы
  - Вопрос формирования группы альтернатив из двух различных ходов в Refusal Chess не в компетенции генератора ходов
  ? (hint set-root-move) объеденяет все, сформированные в его рамках варианты в группу альтернатив
- Оптимизация: pre-проверка не использующая current-position (либо сразу переопределяющая её) может быть выполнена однократно, если она не формирует переменных используемых впоследствии
  - Такая оптимизация может быть выполнена и в случае, если она изменяет позицию на доске (см. repair-coherence в ordo) для этого должен формироваться слепок состояния, от которого будут рассчитываться последующие ходы (включая атрибуты генератора ходов)
- Оптимизация: pre-проверку loss-условия отсутствия ходов выполнять после генерации списка ходов (если список пуст - отложенная проверка срабатывает так, как если бы она проверялась до формирования списка)
- Не требуется разделение по типам ходов move и drop, всегда проверяются все возможные позиции, допольнительные проверки выполняются check
- Ходы генерируются в порядке их описания (в ordo это является оптимизацией)
- pre и post-проверки выполняются в порядке их определения (за исключением оптимизированных)
- any может бросать CheckConstraint, если нет вариантов
- В Sig используется возможность неограниченной отмены (своих) ранее сделанных ходов
  - Желательно иметь возможность опционального сохранения в несколько именованных журналов
    - В том числе ходов генерируемых командами отката ранее сделанных ходов
    - Должна иметься возможность отката ходов других игроков
  - Возможен откат любых действий, выполненных в рамках хода (не только перемещений, но и изменений атрибутов, сбросов, взятий,...)
  - SmartMove должен уметь делать ход автоматически (не только Pass) если имеется единственный вариант
